import streamlit as st
import pandas as pd
import openpyxl
import matplotlib.pyplot as plt
from openpyxl.drawing.image import Image
import numpy as np
import io
import xlsxwriter
import math
from openpyxl.styles import Border, Side
from openpyxl.styles import PatternFill
from openpyxl.chart import LineChart, Reference
import xlsxwriter
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
import openpyxl
from openpyxl.chart import LineChart
from openpyxl.drawing.colors import ColorChoice
from openpyxl.drawing.text import CharacterProperties
from openpyxl.styles import Font
from openpyxl import Workbook, load_workbook
from datetime import datetime
from openpyxl.styles import Alignment
from openpyxl.styles import PatternFill

def extract_first_digit(number):
    """‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"""
    while number >= 10:
        number //= 10
    return number

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå GL
root = tk.Tk()
root.withdraw()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å

if not gl_file:
    print("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•(GL)!")
    exit()

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå GL
print("üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå...")

xls = pd.ExcelFile(gl_file)
gl_sheets = [s for s in xls.sheet_names if 'GL' in s]

if not gl_sheets:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ 'GL' ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠!")
    exit()

# ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ó‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
sheet_name = gl_sheets[0]
df_gl = pd.read_excel(gl_file, sheet_name=sheet_name)

print(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå GL ‡πÅ‡∏•‡πâ‡∏ß")

#  ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
if not output_filename:
    print("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå!")
    exit()

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GL ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
print("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà...")
with pd.ExcelWriter(output_filename, engine="openpyxl") as writer:
    df_gl.to_excel(writer, sheet_name="GL", index=False)

print(f"üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏µ‡πà: {output_filename}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå
def choose_account(matches):
    while True:
        print("üîπ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô:")
        for i, acc in enumerate(matches):
            print(f"[{i+1}] {acc}")
        print("[0] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ")
        if choice.isdigit():
            choice = int(choice)
            if choice == 0:
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                return None
            if 1 <= choice <= len(matches):
                selected_account = matches[choice - 1]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
                print(f"‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {selected_account}")  # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                return selected_account  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        filtered_df = df_gl[df_gl[account_cols].apply(lambda x: any(selected_account.lower() in str(val).lower() for val in x), axis=1)]
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if not filtered_df.empty:
            print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_account}")
            # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
            # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            return filtered_df  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ {selected_account}")
            return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

# ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
while True:
    user_input = input("üîç ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ").strip()
    
    #  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_cols = [col for col in df_gl.columns if any(keyword in col.lower() for keyword in ["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", "account no.", "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", "account name"])]
    if not account_cols:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ!")
        exit()

    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á & ‡∏Ñ‡πà‡∏≤ NaN)
    df_gl[account_cols] = df_gl[account_cols].apply(lambda x: x.astype(str).str.strip().fillna(''))
 
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    matches = set()
    
    filtered_df_list = []  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

    for col in account_cols:
        matches.update(df_gl[col].dropna().astype(str).unique())
    
    matches = sorted([m for m in matches if user_input.lower() in str(m).lower()])
           
    if not matches:
        print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!")
        continue
    
    if len(matches) > 5:  # If there are too many matches, ask for a more specific query
        print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà!")
        continue
    
    if len(matches) > 1:
        user_input = choose_account(matches)
        if not user_input:
            exit()
            
    # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå        
    filtered_df_list = []
    for col in account_cols:
        matches = df_gl[df_gl[col].astype(str).str.contains(user_input, case=False, na=False)]
        if not matches.empty:
            filtered_df_list.append(matches)

    if filtered_df_list:
        filtered_df = pd.concat(filtered_df_list, ignore_index=True).drop_duplicates()
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!")
        continue
    break

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
print(f"‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
with pd.ExcelWriter(output_filename, engine="openpyxl", mode="a") as writer:
    filtered_df.to_excel(writer, sheet_name=user_input, index=False)

print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

# ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á
df_selected = pd.read_excel(output_filename, sheet_name=user_input)

print("‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏î‡∏ö‡∏¥‡∏ï' ‡∏´‡∏£‡∏∑‡∏≠ 'Dr.' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
debit_col = next((col for col in df_selected.columns if "‡πÄ‡∏î‡∏ö‡∏¥‡∏ï" in col.lower() or "dr." in col.lower()), None)
if not debit_col:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏ö‡∏¥‡∏ï‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å!")
    exit()

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏ö‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
valid_data = df_selected[debit_col].dropna().astype(float)

# ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å
first_digits = valid_data.apply(lambda x: extract_first_digit(int(x)))

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å
first_digit_counts = first_digits.value_counts().sort_index()
total_count = first_digit_counts.sum()

# Benford's Law ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
benford_probabilities = {d: np.log10(1 + 1/d) for d in range(1, 10)}
benford_predicted = {d: benford_probabilities[d] * total_count for d in benford_probabilities}

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó Benford
wb = openpyxl.load_workbook(output_filename)
if "Benford" in wb.sheetnames:
    ws_benford = wb["Benford's"]
    wb.remove(ws_benford)
wb.create_sheet("Benford's")
ws_benford = wb["Benford's"]

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡πÅ‡∏•‡∏∞ "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_input ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
if user_input.isdigit():  # ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_no = user_input
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_name = filtered_df[filtered_df[account_cols[0]].astype(str) == account_no].iloc[0][account_cols[1]]
else:  # ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_name = user_input
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    account_no = filtered_df[filtered_df[account_cols[1]].astype(str).str.contains(account_name, case=False, na=False)].iloc[0][account_cols[0]]

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó "Anomaly"
ws_benford.append([account_no, account_name])

# ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå
header_fill = PatternFill(start_color="ADD8E6", end_color="ADD8E6", fill_type="solid")
header_font = openpyxl.styles.Font(bold=True, size=13)

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏°‡∏µ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î 16
ws_benford.cell(row=1, column=1).fill = header_fill
ws_benford.cell(row=1, column=1).font = header_font
ws_benford.cell(row=1, column=2).fill = header_fill
ws_benford.cell(row=1, column=2).font = header_font
ws_benford.cell(row=1, column=3).fill = header_fill
ws_benford.cell(row=1, column=4).fill = header_fill
ws_benford.cell(row=1, column=5).fill = header_fill
ws_benford.cell(row=1, column=6).fill = header_fill
ws_benford.cell(row=1, column=7).fill = header_fill
ws_benford.cell(row=1, column=8).fill = header_fill

ws_benford.append(["", ""])

ws_benford.append(["DATA", "FIRST DIGIT"])

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
yel_fill = PatternFill(start_color="FFFF57", end_color="FFFF57", fill_type="solid")  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
green_fill = PatternFill(start_color="A0EA68", end_color="A0EA68", fill_type="solid")  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
head_font = openpyxl.styles.Font(bold=True, size=11)

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏°‡∏µ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î 16
ws_benford.cell(row=3, column=1).fill = yel_fill
ws_benford.cell(row=3, column=2).fill = yel_fill
ws_benford.cell(row=3, column=1).font = head_font
ws_benford.cell(row=3, column=2).font = head_font

# ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DATA ‡πÅ‡∏•‡∏∞ FIRST DIGIT
for data, digit in zip(valid_data, first_digits):
    ws_benford.append([data, digit])

#  ‡πÄ‡∏ß‡πâ‡∏ô 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Benford's Law
start_row = 3  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3
start_col = 4  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 4)

# ‡∏Ñ‡πà‡∏≤‡∏ó‡∏§‡∏©‡∏é‡∏µ Benford's Law ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å 1-9
benford_predicted = {digit: math.log10(1 + 1 / digit) * 100 for digit in range(1, 10)}

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 'total_count' ‡πÅ‡∏•‡∏∞ 'first_digit_counts' ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
total_data_points = total_count

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏≤
bold_font = Font(bold=True)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå D4
ws_benford.cell(row=start_row, column=start_col, value="First Digit").fill = green_fill
ws_benford.cell(row=start_row, column=start_col, value="First Digit").font = bold_font

ws_benford.cell(row=start_row, column=start_col + 1, value="Occurrence of Digit").fill = green_fill
ws_benford.cell(row=start_row, column=start_col + 1, value="Occurrence of Digit").font = bold_font

ws_benford.cell(row=start_row, column=start_col + 2, value="Frequency of First Digit (%)").fill = green_fill
ws_benford.cell(row=start_row, column=start_col + 2, value="Frequency of First Digit (%)").font = bold_font

ws_benford.cell(row=start_row, column=start_col + 3, value="Predicted By Benford (%)").fill = green_fill
ws_benford.cell(row=start_row, column=start_col + 3, value="Predicted By Benford (%)").font = bold_font

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
border = Border(
    top=Side(border_style="thin", color="000000"),
    bottom=Side(border_style="thin", color="000000"),
    left=Side(border_style="thin", color="000000"),
    right=Side(border_style="thin", color="000000")
)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ
for col in range(start_col, start_col + 4):
    ws_benford.cell(row=start_row, column=col).border = border

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á "Occurrence", "Frequency", ‡πÅ‡∏•‡∏∞ "Predicted"
total_occurrence = 0
total_frequency = 0
total_predicted = 0

pink_fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")  # ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
red_font = Font(color="FF0000", bold=True)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
for digit in range(1, 10):
    occurrence = first_digit_counts.get(digit, 0)
    predicted = benford_predicted[digit]  # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏§‡∏©‡∏é‡∏µ Benford's Law
    frequency = (occurrence / total_data_points) * 100 if total_data_points else 0

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°
    total_occurrence += occurrence
    total_frequency += frequency
    total_predicted += predicted

    start_row += 1
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö First Digit
    first_digit_cell = ws_benford.cell(row=start_row, column=start_col, value=digit)
    first_digit_cell.border = border

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Occurrence
    occurrence_cell = ws_benford.cell(row=start_row, column=start_col + 1, value=occurrence)
    occurrence_cell.border = border

    # ‡∏ñ‡πâ‡∏≤ Frequency ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ Predicted ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ **‡πÄ‡∏â‡∏û‡∏≤‡∏∞ First Digit ‡πÅ‡∏•‡∏∞ Occurrence**
    if frequency > predicted:
        first_digit_cell.fill = pink_fill  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á First Digit ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
        occurrence_cell.fill = pink_fill  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Occurrence ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Frequency ‡πÅ‡∏•‡∏∞ Predicted 
    freq_cell = ws_benford.cell(row=start_row, column=start_col + 2, value=frequency)
    freq_cell.number_format = '0.00'
    freq_cell.border = border

    pred_cell = ws_benford.cell(row=start_row, column=start_col + 3, value=predicted)
    pred_cell.number_format = '0.00'
    pred_cell.border = border

    # ‡∏ñ‡πâ‡∏≤ Frequency ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ Predicted ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
    if frequency > predicted:
        freq_cell.fill = pink_fill  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
        freq_cell.font = red_font  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏≤
        
# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Total Frequency ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 100%
if total_frequency != 100 and total_frequency > 0:
    adjustment_factor = 100 / total_frequency
    total_frequency = 0  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤

    for digit in range(1, 10):
        row_idx = start_row - (9 - digit)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        old_frequency = ws_benford.cell(row=row_idx, column=start_col + 2).value
        new_frequency = old_frequency * adjustment_factor  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ 100%
        total_frequency += new_frequency  # ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ Frequency ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Excel
        ws_benford.cell(row=row_idx, column=start_col + 2, value=new_frequency).number_format = '0.00'

# ‡πÄ‡∏û‡∏¥‡πà‡∏° "Total Number Of Data Points" ‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
start_row += 1
ws_benford.cell(row=start_row, column=start_col, value="Total Number Of Data Points").fill = header_fill
ws_benford.cell(row=start_row, column=start_col, value="Total Number Of Data Points").border = border
ws_benford.cell(row=start_row, column=start_col + 1, value=total_occurrence).border = border
ws_benford.cell(row=start_row, column=start_col + 2, value=total_frequency).number_format = '0.00'
ws_benford.cell(row=start_row, column=start_col + 2).border = border
ws_benford.cell(row=start_row, column=start_col + 3, value=total_predicted).number_format = '0.00'
ws_benford.cell(row=start_row, column=start_col + 3).border = border

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
border = Border(
    top=Side(border_style="thin", color="000000"),
    bottom=Side(border_style="thin", color="000000"),
    left=Side(border_style="thin", color="000000"),
    right=Side(border_style="thin", color="000000")
)

gray_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ
for col in range(start_col, start_col + 4):
    ws_benford.cell(row=start_row, column=col).border = border
    cell = ws_benford.cell(row=start_row, column=col)
    cell.fill = gray_fill

# ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡∏µ‡∏ó "Anomaly"
ws = wb["Benford's"]

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏õ‡πå F2-F12 (Frequency of First Digit) ‡πÅ‡∏•‡∏∞ G3-G12 (Predicted by Benford)
frequency_data = Reference(ws, min_col=6, min_row=3, max_row=12)  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏õ‡πå F
benford_data = Reference(ws, min_col=7, min_row=3, max_row=12)  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏õ‡πå G

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
chart = LineChart()
chart.add_data(frequency_data, titles_from_data=True)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
chart.add_data(benford_data, titles_from_data=True)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Benford
chart.title = "Data Deviation from Benford"
chart.style = 3  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
chart.x_axis.title = "First Digit"
chart.y_axis.title = "Frequency (%)"
# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
chart.width = 16  # ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
chart.height = 8  # ‡∏™‡∏π‡∏á

chart.plot_area.left = 5  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
chart.plot_area.right = 2  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
chart.plot_area.top = 4    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
chart.plot_area.bottom = 4  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

chart.legend.position = 'b'  # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
chart.legend.include_in_layout = False  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
chart.legend.width = 10  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
chart.legend.height = 2  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Gridlines
chart.x_axis.majorGridlines   # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô X
chart.y_axis.majorGridlines   # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô Y

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô
chart.x_axis.delete = False
chart.y_axis.delete = False
chart.x_axis.tickLblPos = "nextTo"
chart.y_axis.tickLblPos = "nextTo"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tick Mark ‡πÅ‡∏•‡∏∞ Major Unit
chart.x_axis.majorTickMark = "cross"
chart.y_axis.majorTickMark = "cross"
chart.x_axis.majorUnit = 1  # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô X ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡∏•‡∏∞ 1 (1,2,3,...9)
chart.y_axis.majorUnit = 10  # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô Y ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 10
chart.y_axis.minorUnit = 5   # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô Y ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡∏•‡∏∞ 5
chart.y_axis.majorTickMark = 'in'  # ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡πä‡∏Å‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô Y ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
chart.x_axis.number_format = '0'
chart.y_axis.number_format = '0'

# ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏á
chart.x_axis.overlap = 0
chart.y_axis.overlap = 0

# === ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ===

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á)
series1 = chart.series[0]
series1.graphicalProperties.line.solidFill = "E60000"  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
series1.graphicalProperties.line.width = 20000  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏™‡πâ‡∏ô
series1.marker.symbol = "none"  # ‡∏à‡∏∏‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°

# ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå Benford (‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
series2 = chart.series[1]
series2.graphicalProperties.line.solidFill = "0070C0"  # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
series2.graphicalProperties.line.width = 20000  # ‡∏ö‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
series2.marker.symbol = "none"  # ‡∏à‡∏∏‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó
ws.add_chart(chart, "D16")  # ‡∏ß‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á D16

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ
def autofit_columns(ws, alignment_dict, header_alignment="center"):
    for col in ws.columns:
        max_length = 0
        col_letter = col[0].column_letter  # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÄ‡∏ä‡πà‡∏ô A, B, C
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = (max_length + 2) * 1.2  # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°
        ws.column_dimensions[col_letter].width = adjusted_width

        for cell in col:
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß (header)
            if cell.row == 3:  # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 3
                header_alignment_obj = Alignment(horizontal=header_alignment)
                cell.alignment = header_alignment_obj
            else:
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö data cells
                alignment_type = alignment_dict.get(col_letter, "center")  # ‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô "center"
                
                if alignment_type == "left":
                    alignment = Alignment(horizontal="left")
                elif alignment_type == "right":
                    alignment = Alignment(horizontal="right")
                elif alignment_type == "center":
                    alignment = Alignment(horizontal="center")
                else:
                    alignment = Alignment(horizontal="center")

                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß)
                if cell.row != 3:  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
                    cell.alignment = alignment

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
alignment_dict = {
    "A": "right",   # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
    "B": "center",  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    "C": "center",  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    "D": "center",  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    "E": "center",  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    "F": "right",   # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
    "G": "right",   # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå G ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
}

# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó `Anomaly` ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
autofit_columns(ws_benford, alignment_dict, header_alignment="center")  # ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô "center"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ï "Analyze" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
if "Analyze" not in wb.sheetnames:
    wb.create_sheet("Analyze")
    wb.save(output_filename)

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï "Anomaly"
ws_benford = wb["Benford's"]
highlighted_digits = set()

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "First Digit", "Frequency" ‡πÅ‡∏•‡∏∞ "Predicted"
first_digit_col = None
freq_col = None
pred_col = None

for col in ws_benford.iter_cols(min_row=3, max_row=3):
    header = col[0].value
    if header == "First Digit":
        first_digit_col = col[0].column
    elif header == "Frequency of First Digit (%)":
        freq_col = col[0].column
    elif header == "Predicted By Benford (%)":
        pred_col = col[0].column

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if None in (first_digit_col, freq_col, pred_col):
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ('First Digit', 'Frequency of First Digit (%)', 'Predicted By Benford (%)')")
else:
    # ‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 4 ‡∏•‡∏á‡πÑ‡∏õ
    for row in ws_benford.iter_rows(min_row=4, max_row=12):
        first_digit_cell = row[first_digit_col - 1]  # First Digit
        freq_cell = row[freq_col - 1]  # Frequency
        pred_cell = row[pred_col - 1]  # Predicted

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Frequency > Predicted
        if freq_cell.value and pred_cell.value and freq_cell.value > pred_cell.value:
            highlighted_digits.add(first_digit_cell.value)  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÉ‡∏ô First Digit
print(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ : {highlighted_digits}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_input ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if user_input in wb.sheetnames:
    account_sheets = [user_input]  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
else:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï {user_input} ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel!")
    exit()
    
filtered_data = []

for sheet in account_sheets:
    df_account = pd.read_excel(output_filename, sheet_name=sheet)

    #  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏î‡∏ö‡∏¥‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠ "Dr."
    debit_col = next((col for col in df_account.columns if "‡πÄ‡∏î‡∏ö‡∏¥‡∏ï" in col.lower() or "dr." in col.lower()), None)
    if not debit_col:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏î‡∏ö‡∏¥‡∏ï' ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï {sheet}, ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ!")
        continue  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏ö‡∏¥‡∏ï ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ

     #  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "First Digit" ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏î‡∏ö‡∏¥‡∏ï"
    df_account["First Digit"] = pd.to_numeric(df_account[debit_col], errors='coerce').dropna().astype(str).str[0]
    df_account["First Digit"] = pd.to_numeric(df_account["First Digit"], errors='coerce').astype("Int64")

     # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏à‡∏≤‡∏Å highlighted_digits)
    if highlighted_digits:
        df_filtered = df_account[df_account["First Digit"].isin(highlighted_digits)].copy()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not df_filtered.empty:
            filtered_data.append(df_filtered)
            print(f"‚ö†Ô∏è ‡∏û‡∏ö {len(df_filtered)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ !")
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ !")

    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ !")

#  ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
df_result = pd.concat(filtered_data, ignore_index=True)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ä‡∏µ‡∏ï "Analyze"
try:
    with pd.ExcelWriter(output_filename, engine="openpyxl", mode="a", if_sheet_exists="overlay") as writer:
        df_result.to_excel(writer, sheet_name="Analyze", index=False)
    print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡πÄ‡∏•‡πâ‡∏ß")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")

print(f"üìÇ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : {output_filename}")














